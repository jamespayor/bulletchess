from typing import Optional, Any
from bulletchess.main import *

class PGNDate:

    def __init__(self, year : Optional[int], month : Optional[int], day : Optional[int]): ...

    @property
    def year(self) -> Optional[int]: ...

    @property
    def month(self) -> Optional[int]: ...

    @property
    def day(self) -> Optional[int]: ...

    def __str__(self) -> str: ...

    def __repr__(self) -> str: ...

    def __eq__(self, other : Any) -> bool: ...

    def __le__(self, other : PGNDate) -> bool: ...

    def __ge__(self, other : PGNDate) -> bool: ...

    def __lt__(self, other : PGNDate) -> bool: ...

    def __gt__(self, other : PGNDate) -> bool: ...

    def __hash__(self) -> int: ...


class PGNResult:
    
    @property
    def winner(self) -> Optional[Color]: ...

    @property
    def draw(self) -> bool: ...

    @property
    def unknown(self) -> bool: ...

    def __int__(self) -> int: ...

    def __eq__(self, other : Any) -> bool: ...

    def __str__(self) -> str: ...

    def __repr__(self) -> str: ...

    def __hash__(self) -> int: ...


class PGNGame:
    @property
    def event(self) -> str: ...

    @property
    def site(self) -> str: ...

    @property
    def round(self) -> str: ...

    @property
    def date(self) -> PGNDate: ...

    @property
    def white_player(self) -> str: ...

    @property
    def black_player(self) -> str: ...

    @property
    def result(self) -> PGNResult: ...

    @property
    def move_count(self) -> int: ...
    
    @property
    def moves(self) -> list[Move]: ...

    @property
    def tags(self) -> dict[str, str]: ...

    def __hash__(self) -> int: ...

    def __eq__(self, other : Any) -> bool: ... 


class PGNFile:
    
    @staticmethod
    def open(path : str) -> "PGNFile": ...

    def close(self) -> None: ...

    def next_game(self) -> PGNGame: ...

    def skip_game(self) -> None: ...

    def __enter__(self): ...

    def __exit__(self): ...
