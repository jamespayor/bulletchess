
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/walkthrough.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_walkthrough.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_walkthrough.py:


Basic Walkthrough
=================

First, lets import everything from :pkg:`bulletchess`

.. GENERATED FROM PYTHON SOURCE LINES 7-10

.. code-block:: Python


    from bulletchess import *








.. GENERATED FROM PYTHON SOURCE LINES 11-13

The :func:`Board()` constructor returns a :class:`Board` representing the starting position.


.. GENERATED FROM PYTHON SOURCE LINES 13-17

.. code-block:: Python


    board = Board()
    board






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>
    	.bulletchess-board {
    		all: unset;
    	}
    	.bulletchess-board *,
    	.bulletchess-board *::before,
    	.bulletchess-board *::after {
      		all: unset;
    	}
    	.bulletchess-board .lt {
      		height: 50px;
      		width: 50px;
      		background-color: #F0D9B5;
    		text-align: center;
    		vertical-align: middle;
    	}
    	.bulletchess-board .dk {
    	  	height: 50px;
      		width: 50px;
      		background-color: #B58863;
    		text-align: center;
    		vertical-align: middle;
    	}
    	.bulletchess-board .row {
    		display: flex;
    	}
    	.bulletchess-board .wP {
    		content:url("https://raw.githubusercontent.com/lichess-org/lila/cff8e62ce78815f84b59aadc0bdf44d326bfb88f/public/piece/cburnett/wP.svg");
    	}
    	.bulletchess-board .wN {
    		content:url("https://raw.githubusercontent.com/lichess-org/lila/cff8e62ce78815f84b59aadc0bdf44d326bfb88f/public/piece/cburnett/wN.svg");
    	}
    	.bulletchess-board .wB {
    		content:url("https://raw.githubusercontent.com/lichess-org/lila/cff8e62ce78815f84b59aadc0bdf44d326bfb88f/public/piece/cburnett/wB.svg");
    	}
    	.bulletchess-board .wR {
    		content:url("https://raw.githubusercontent.com/lichess-org/lila/cff8e62ce78815f84b59aadc0bdf44d326bfb88f/public/piece/cburnett/wR.svg");
    	}
    	.bulletchess-board .wQ {
    		content:url("https://raw.githubusercontent.com/lichess-org/lila/cff8e62ce78815f84b59aadc0bdf44d326bfb88f/public/piece/cburnett/wQ.svg");
    	}
    	.bulletchess-board .wK {
    		content:url("https://raw.githubusercontent.com/lichess-org/lila/cff8e62ce78815f84b59aadc0bdf44d326bfb88f/public/piece/cburnett/wK.svg");
    	}
    	.bulletchess-board .bP {
    		content:url("https://raw.githubusercontent.com/lichess-org/lila/cff8e62ce78815f84b59aadc0bdf44d326bfb88f/public/piece/cburnett/bP.svg");
    	}
    	.bulletchess-board .bN {
    		content:url("https://raw.githubusercontent.com/lichess-org/lila/cff8e62ce78815f84b59aadc0bdf44d326bfb88f/public/piece/cburnett/bN.svg");
    	}
    	.bulletchess-board .bB {
    		content:url("https://raw.githubusercontent.com/lichess-org/lila/cff8e62ce78815f84b59aadc0bdf44d326bfb88f/public/piece/cburnett/bB.svg");
    	}
    	.bulletchess-board .bR {
    		content:url("https://raw.githubusercontent.com/lichess-org/lila/cff8e62ce78815f84b59aadc0bdf44d326bfb88f/public/piece/cburnett/bR.svg");
    	}
    	.bulletchess-board .bQ {
    		content:url("https://raw.githubusercontent.com/lichess-org/lila/cff8e62ce78815f84b59aadc0bdf44d326bfb88f/public/piece/cburnett/bQ.svg");
    	}
    	.bulletchess-board .bK {
    		content:url("https://raw.githubusercontent.com/lichess-org/lila/cff8e62ce78815f84b59aadc0bdf44d326bfb88f/public/piece/cburnett/bK.svg");
    	}
    </style>
    <div class ="bulletchess-board">
    	<div class = "row">
    		<div class = "lt"><div class = "wR"></div></div>
    		<div class = "dk"><div class = "wN"></div></div>
    		<div class = "lt"><div class = "wB"></div></div>
    		<div class = "dk"><div class = "wQ"></div></div>
    		<div class = "lt"><div class = "wK"></div></div>
    		<div class = "dk"><div class = "wB"></div></div>
    		<div class = "lt"><div class = "wN"></div></div>
    		<div class = "dk"><div class = "wR"></div></div>
    	</div>
    	<div class = "row">
    		<div class = "dk"><div class = "wP"></div></div>
    		<div class = "lt"><div class = "wP"></div></div>
    		<div class = "dk"><div class = "wP"></div></div>
    		<div class = "lt"><div class = "wP"></div></div>
    		<div class = "dk"><div class = "wP"></div></div>
    		<div class = "lt"><div class = "wP"></div></div>
    		<div class = "dk"><div class = "wP"></div></div>
    		<div class = "lt"><div class = "wP"></div></div>
    	</div>
    	<div class = "row">
    		<div class = "lt"></div>
    		<div class = "dk"></div>
    		<div class = "lt"></div>
    		<div class = "dk"></div>
    		<div class = "lt"></div>
    		<div class = "dk"></div>
    		<div class = "lt"></div>
    		<div class = "dk"></div>
    	</div>
    	<div class = "row">
    		<div class = "dk"></div>
    		<div class = "lt"></div>
    		<div class = "dk"></div>
    		<div class = "lt"></div>
    		<div class = "dk"></div>
    		<div class = "lt"></div>
    		<div class = "dk"></div>
    		<div class = "lt"></div>
    	</div>
    <div class = "row">
    		<div class = "lt"></div>
    		<div class = "dk"></div>
    		<div class = "lt"></div>
    		<div class = "dk"></div>
    		<div class = "lt"></div>
    		<div class = "dk"></div>
    		<div class = "lt"></div>
    		<div class = "dk"></div>
    	</div>
    	<div class = "row">
    		<div class = "dk"></div>
    		<div class = "lt"></div>
    		<div class = "dk"></div>
    		<div class = "lt"></div>
    		<div class = "dk"></div>
    		<div class = "lt"></div>
    		<div class = "dk"></div>
    		<div class = "lt"></div>
    	</div>
    <div class = "row">
    		<div class = "lt"><div class = "bP"></div></div>
    		<div class = "dk"><div class = "bP"></div></div>
    		<div class = "lt"><div class = "bP"></div></div>
    		<div class = "dk"><div class = "bP"></div></div>
    		<div class = "lt"><div class = "bP"></div></div>
    		<div class = "dk"><div class = "bP"></div></div>
    		<div class = "lt"><div class = "bP"></div></div>
    		<div class = "dk"><div class = "bP"></div></div>
    	</div>
    	<div class = "row">
    		<div class = "dk"><div class = "bR"></div></div>
    		<div class = "lt"><div class = "bN"></div></div>
    		<div class = "dk"><div class = "bB"></div></div>
    		<div class = "lt"><div class = "bQ"></div></div>
    		<div class = "dk"><div class = "bK"></div></div>
    		<div class = "lt"><div class = "bB"></div></div>
    		<div class = "dk"><div class = "bN"></div></div>
    		<div class = "lt"><div class = "bR"></div></div>
    	</div>
    </div>

    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 18-20

Other positions can be specified by either using :func:`Board.from_fen()`.


.. GENERATED FROM PYTHON SOURCE LINES 20-24

.. code-block:: Python


    board = Board.from_fen("rnbqkbnr/pp1ppppp/8/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 1 2")
    print(board)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    r n b q k b n r 
    p p - p p p p p 
    - - - - - - - - 
    - - p - - - - - 
    - - - - P - - - 
    - - - - - N - - 
    P P P P - P P P 
    R N B Q K B - R 





.. GENERATED FROM PYTHON SOURCE LINES 25-27

Or by assigning :class:`Piece` locations manually. We can use :func:`Board.empty()` to start from a clean slate.


.. GENERATED FROM PYTHON SOURCE LINES 27-31

.. code-block:: Python


    board = Board.empty()
    print(board)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    - - - - - - - - 
    - - - - - - - - 
    - - - - - - - - 
    - - - - - - - - 
    - - - - - - - - 
    - - - - - - - - 
    - - - - - - - - 
    - - - - - - - - 





.. GENERATED FROM PYTHON SOURCE LINES 32-34

And then assign a :class:`Piece` to each :class:`Square`.


.. GENERATED FROM PYTHON SOURCE LINES 34-48

.. code-block:: Python


    board[G2] = Piece(WHITE, KING)
    board[F2] = Piece(WHITE, PAWN)
    board[G3] = Piece(WHITE, PAWN)
    board[H2] = Piece(WHITE, PAWN)
    board[B3] = Piece(WHITE, ROOK)

    board[F7] = Piece(BLACK, KING)
    board[D7] = Piece(BLACK, ROOK)
    board[F6] = Piece(BLACK, PAWN)
    board[G7] = Piece(BLACK, PAWN)

    print(board)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    - - - - - - - - 
    - - - r - k p - 
    - - - - - p - - 
    - - - - - - - - 
    - - - - - - - - 
    - R - - - - P - 
    - - - - - P K P 
    - - - - - - - - 





.. GENERATED FROM PYTHON SOURCE LINES 49-51

We can get the FEN of this position with :func:`Board.fen()`. We might want to set the halfmove clock
and fullmove number for this endgame position. Let's also make it black's turn.

.. GENERATED FROM PYTHON SOURCE LINES 51-58

.. code-block:: Python


    board.halfmove_clock = 3
    board.fullmove_number = 43
    board.turn = BLACK

    print(board.fen())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    8/3r1kp1/5p2/8/8/1R4P1/5PKP/8 b - - 3 43




.. GENERATED FROM PYTHON SOURCE LINES 59-61

For a nicer view of a position, we can use :func:`Board.pretty()`. 
Lets try some different :class:`Board.ColorScheme` options too.

.. GENERATED FROM PYTHON SOURCE LINES 61-66

.. code-block:: Python


    print(board.pretty())
    print(board.pretty(Board.SLATE))
    print(board.pretty(Board.GREEN))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

                    
          ♜   ♚ ♟   
              ♟     
                    
                    
      ♖         ♙   
              ♙ ♔ ♙ 
                    
    
                    
          ♜   ♚ ♟   
              ♟     
                    
                    
      ♖         ♙   
              ♙ ♔ ♙ 
                    
    
                    
          ♜   ♚ ♟   
              ♟     
                    
                    
      ♖         ♙   
              ♙ ♔ ♙ 
                    
    




.. GENERATED FROM PYTHON SOURCE LINES 67-69

We can also use :class:`Bitboard` objects to highlight difference squares. 
This can be used for example in order to show a :class:`Piece`'s possible moves.

.. GENERATED FROM PYTHON SOURCE LINES 69-73

.. code-block:: Python


    print(board.pretty(board.WALNUT, highlighted_squares= G7.bb(), targeted_squares= Bitboard([G6, G5])))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

                    
          ♜   ♚ ♟   
              ♟  •  
                 •  
                    
      ♖         ♙   
              ♙ ♔ ♙ 
                    
    




.. GENERATED FROM PYTHON SOURCE LINES 74-76

A :class:`Bitboard` is an efficient representation of a set of :class:`Square` values. Indexing a :class:`Board`
with a :class:`Color`, :class:`PieceType`, or both returns :class:`Bitboard` of squares with the relevant kind of :class:`Piece`.

.. GENERATED FROM PYTHON SOURCE LINES 76-81

.. code-block:: Python


    print(board[WHITE])
    print(board[ROOK])
    print(board[BLACK, PAWN])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    0 0 0 0 0 0 0 0 
    0 0 0 0 0 0 0 0 
    0 0 0 0 0 0 0 0 
    0 0 0 0 0 0 0 0 
    0 0 0 0 0 0 0 0 
    0 1 0 0 0 0 1 0 
    0 0 0 0 0 1 1 1 
    0 0 0 0 0 0 0 0 

    0 0 0 0 0 0 0 0 
    0 0 0 1 0 0 0 0 
    0 0 0 0 0 0 0 0 
    0 0 0 0 0 0 0 0 
    0 0 0 0 0 0 0 0 
    0 1 0 0 0 0 0 0 
    0 0 0 0 0 0 0 0 
    0 0 0 0 0 0 0 0 

    0 0 0 0 0 0 0 0 
    0 0 0 0 0 0 1 0 
    0 0 0 0 0 1 0 0 
    0 0 0 0 0 0 0 0 
    0 0 0 0 0 0 0 0 
    0 0 0 0 0 0 0 0 
    0 0 0 0 0 0 0 0 
    0 0 0 0 0 0 0 0 





.. GENERATED FROM PYTHON SOURCE LINES 82-83

We can generate legal :class:`Move` objects for this position with :func:`Board.legal_moves()`

.. GENERATED FROM PYTHON SOURCE LINES 83-87

.. code-block:: Python


    moves = board.legal_moves()
    print(moves)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [<Move: f6f5>, <Move: d7d1>, <Move: d7d2>, <Move: d7d3>, <Move: d7d4>, <Move: d7d5>, <Move: d7d6>, <Move: d7a7>, <Move: d7b7>, <Move: d7c7>, <Move: d7e7>, <Move: d7d8>, <Move: f7e6>, <Move: f7g6>, <Move: f7e7>, <Move: f7e8>, <Move: f7f8>, <Move: f7g8>, <Move: g7g5>, <Move: g7g6>]




.. GENERATED FROM PYTHON SOURCE LINES 88-90

Lets move our rook. To perform a move, we use :func:`Board.apply()`. 
Moves can be created manually with the :func:`Move()` constructor.

.. GENERATED FROM PYTHON SOURCE LINES 90-96

.. code-block:: Python


    selected_move = Move(D7, D3)
    board.apply(selected_move)
    print(board.pretty())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

                    
              ♚ ♟   
              ♟     
                    
                    
      ♖   ♜     ♙   
              ♙ ♔ ♙ 
                    
    




.. GENERATED FROM PYTHON SOURCE LINES 97-100

Oh, but that was a blunder. moves can be undone with `Board.undo()`, which returns
the last :class:`Move` applied. Getting the `str` of a :class:`Move` renders the move
in UCI long algebraic notation.

.. GENERATED FROM PYTHON SOURCE LINES 100-105

.. code-block:: Python


    print("Undoing " + str(board.undo()))
    print(board.pretty())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Undoing d7d3
                    
          ♜   ♚ ♟   
              ♟     
                    
                    
      ♖         ♙   
              ♙ ♔ ♙ 
                    
    




.. GENERATED FROM PYTHON SOURCE LINES 106-107

Lets run the game through for a bit. Moves can also be constructed from UCI or standard algebraic notation.

.. GENERATED FROM PYTHON SOURCE LINES 107-116

.. code-block:: Python


    board.apply(Move.from_san("g5", board))
    board.apply(Move.from_uci("h2h4"))
    board.apply(Move(G5, H4))
    board.apply(Move(G3, H4))
    board.apply(Move.from_san("Kg7", board))
    board.apply(Move.from_san("Rg3", board))
    print(board.pretty())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

                    
          ♜     ♚   
              ♟     
                    
                  ♙ 
                ♖   
              ♙ ♔   
                    
    




.. GENERATED FROM PYTHON SOURCE LINES 117-118

Black exposed their king, and is now in check.

.. GENERATED FROM PYTHON SOURCE LINES 118-121

.. code-block:: Python


    print(board in CHECK)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    True




.. GENERATED FROM PYTHON SOURCE LINES 122-123

But the game is still ongoing.

.. GENERATED FROM PYTHON SOURCE LINES 123-127

.. code-block:: Python


    print(board in CHECKMATE)
    print(board in DRAW)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    False
    False





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.332 seconds)


.. _sphx_glr_download_auto_examples_walkthrough.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: walkthrough.ipynb <walkthrough.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: walkthrough.py <walkthrough.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: walkthrough.zip <walkthrough.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
