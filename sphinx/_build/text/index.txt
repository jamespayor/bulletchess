"bulletchess"
*************

"bulletchess" is a Python module for playing, analyzing, and building
engines for chess. Unlike other chess libraries in Python, the core of
"bulletchess" is written in C, allowing it to be *much* faster than
alternatives.


Overview
========

At a high level, "bulletchess" includes:

* A complete game model with intuitive representations for pieces,
  moves, and positions.

* Extensively tested legal move generation, application, and undoing.

* Parsing and writing of positions specified in Forsyth-Edwards
  Notation (FEN), and moves specified in both Long Algebraic Notation
  and Standard Algebraic Notation.

* Methods to determine if a position is check, checkmate, stalemate,
  and each specific type of draw.

* Efficient hashing of positions using Zobrist Keys.

* A Portable Game Notation (PGN) file reader

* Utility functions for writing engines.


Glossary
========

* Basic Walkthrough

* Performance Comparisons

* Main Documentation

  * "Color"

    * "from_str()"

    * "opposite"

    * "__str__()"

    * "__invert__()"

    * "__hash__()"

    * "__repr__()"

    * "__eq__()"

  * "WHITE"

  * "BLACK"

  * "PieceType"

    * "from_str()"

    * "__str__()"

    * "__repr__()"

    * "__eq__()"

    * "__hash__()"

  * "PAWN"

  * "KNIGHT"

  * "BISHOP"

  * "ROOK"

  * "QUEEN"

  * "KING"

  * "PIECE_TYPES"

  * "Piece"

    * "__init__()"

    * "from_chr()"

    * "piece_type"

    * "color"

    * "unicode()"

    * "__eq__()"

    * "__str__()"

    * "__hash__()"

  * "Square"

    * "from_str()"

    * "bb()"

    * "adjacent()"

    * "north()"

    * "south()"

    * "east()"

    * "west()"

    * "nw()"

    * "ne()"

    * "sw()"

    * "se()"

    * "__eq__()"

    * "__hash__()"

    * "__str__()"

  * "A1"

  * "B1"

  * "C1"

  * "D1"

  * "E1"

  * "F1"

  * "G1"

  * "H1"

  * "A2"

  * "B2"

  * "C2"

  * "D2"

  * "E2"

  * "F2"

  * "G2"

  * "H2"

  * "A3"

  * "B3"

  * "C3"

  * "D3"

  * "E3"

  * "F3"

  * "G3"

  * "H3"

  * "A4"

  * "B4"

  * "C4"

  * "D4"

  * "E4"

  * "F4"

  * "G4"

  * "H4"

  * "A5"

  * "B5"

  * "C5"

  * "D5"

  * "E5"

  * "F5"

  * "G5"

  * "H5"

  * "A6"

  * "B6"

  * "C6"

  * "D6"

  * "E6"

  * "F6"

  * "G6"

  * "H6"

  * "A7"

  * "B7"

  * "C7"

  * "D7"

  * "E7"

  * "F7"

  * "G7"

  * "H7"

  * "A8"

  * "B8"

  * "C8"

  * "D8"

  * "E8"

  * "F8"

  * "G8"

  * "H8"

  * "SQUARES"

  * "SQUARES_FLIPPED"

  * "Bitboard"

    * "__init__()"

    * "__str__()"

    * "from_int()"

    * "__int__()"

    * "__getitem__()"

    * "__setitem__()"

    * "__delitem__()"

    * "__len__()"

    * "__contains__()"

    * "__eq__()"

    * "__invert__()"

    * "__and__()"

    * "__or__()"

    * "__xor__()"

    * "__bool__()"

    * "__iter__()"

    * "__repr__()"

    * "__hash__()"

  * "RANK_1"

  * "RANK_2"

  * "RANK_3"

  * "RANK_4"

  * "RANK_5"

  * "RANK_6"

  * "RANK_7"

  * "RANK_8"

  * "RANKS"

  * "A_FILE"

  * "B_FILE"

  * "C_FILE"

  * "D_FILE"

  * "E_FILE"

  * "F_FILE"

  * "G_FILE"

  * "H_FILE"

  * "FILES"

  * "FULL_BB"

  * "EMPTY_BB"

  * "LIGHT_SQUARE_BB"

  * "DARK_SQUARE_BB"

  * "CastlingType"

    * "from_chr()"

    * "__str__()"

    * "__eq__()"

    * "__repr__()"

    * "__hash__()"

  * "WHITE_KINGSIDE"

  * "WHITE_QUEENSIDE"

  * "BLACK_KINGSIDE"

  * "BLACK_QUEENSIDE"

  * "Move"

    * "__init__()"

    * "castle()"

    * "from_uci()"

    * "from_san()"

    * "san()"

    * "uci()"

    * "__str__()"

    * "origin"

    * "destination"

    * "promotion"

    * "is_promotion()"

    * "is_capture()"

    * "is_castling()"

    * "castling_type()"

    * "__eq__()"

    * "__hash__()"

    * "__repr__()"

  * "CastlingRights"

    * "__init__()"

    * "from_fen()"

    * "fen()"

    * "__contains__()"

    * "__iter__()"

    * "__len__()"

    * "__bool__()"

    * "__add__()"

    * "__eq__()"

    * "__le__()"

    * "__lt__()"

    * "__gt__()"

    * "__ge__()"

    * "__str__()"

    * "full()"

    * "any()"

    * "kingside()"

    * "queenside()"

    * "__repr__()"

    * "__hash__()"

  * "ALL_CASTLING"

  * "NO_CASTLING"

  * "Board"

    * "__init__()"

    * "from_fen()"

    * "empty()"

    * "turn"

    * "halfmove_clock"

    * "fullmove_number"

    * "en_passant_square"

    * "castling_rights"

    * "legal_moves()"

    * "apply()"

    * "undo()"

    * "fen()"

    * "copy()"

    * "__getitem__()"

    * "__setitem__()"

    * "__delitem__()"

    * "__eq__()"

    * "__hash__()"

    * "__contains__()"

    * "history"

    * "__str__()"

    * "pretty()"

    * "ColorScheme"

    * "LAGOON"

    * "SLATE"

    * "OAK"

    * "WALNUT"

    * "GREEN"

    * "ROSE"

    * "CLAY"

    * "STEEL"

  * "BoardStatus"

    * "__contains__()"

    * "__repr__()"

    * "__eq__()"

  * "CHECK"

  * "MATE"

  * "CHECKMATE"

  * "STALEMATE"

  * "INSUFFICIENT_MATERIAL"

  * "FIFTY_MOVE_TIMEOUT"

  * "SEVENTY_FIVE_MOVE_TIMEOUT"

  * "THREEFOLD_REPETITION"

  * "FIVEFOLD_REPETITION"

  * "DRAW"

  * "FORCED_DRAW"

* Utilities

  * "count_moves()"

  * "evaluate()"

  * "is_quiescent()"

  * "perft()"

  * "perft_fen()"

  * "backwards_pawns()"

  * "isolated_pawns()"

  * "doubled_pawns()"

  * "passed_pawns()"

  * "is_pinned()"

  * "attack_mask()"

  * "material()"

  * "mobility()"

  * "open_files()"

  * "half_open_files()"

  * "random_legal_move()"

  * "random_board()"

  * "legally_equal()"

  * "deeply_equal()"

  * "piece_bitboard()"

  * "unoccupied_bitboard()"

  * "white_bitboard()"

  * "black_bitboard()"

  * "king_bitboard()"

  * "queen_bitboard()"

  * "bishop_bitboard()"

  * "rook_bitboard()"

  * "pawn_bitboard()"

  * "knight_bitboard()"

  * "king_square()"

* Portable Game Notation

  * "PGNDate"

    * "__init__()"

    * "year"

    * "month"

    * "day"

    * "__str__()"

    * "__repr__()"

    * "__eq__()"

    * "__le__()"

    * "__ge__()"

    * "__lt__()"

    * "__gt__()"

    * "__hash__()"

  * "PGNResult"

    * "from_str()"

    * "winner"

    * "is_draw"

    * "is_unknown"

    * "__eq__()"

    * "__str__()"

    * "__repr__()"

    * "__hash__()"

  * "WHITE_WON"

  * "BLACK_WON"

  * "DRAW_RESULT"

  * "UNKNOWN_RESULT"

  * "PGNGame"

    * "event"

    * "site"

    * "round"

    * "date"

    * "white_player"

    * "black_player"

    * "result"

    * "move_count"

    * "moves"

    * "starting_board"

    * "__hash__()"

    * "__eq__()"

    * "__getitem__()"

  * "PGNFile"

    * "open()"

    * "close()"

    * "is_open()"

    * "next_game()"

    * "skip_game()"

    * "__enter__()"

    * "__exit__()"
