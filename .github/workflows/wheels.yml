name: Build, test & publish

on:
  workflow_dispatch:
  # Build & test on every push to main
  push:
    branches: [ main ]
  # Upload only when a GitHub release is published
  release:
    types: [ published ]

jobs:
  # ---------------- Build wheels ----------------
  build_wheels:
    name: Build wheels for ${{ matrix.os }}
    runs-on: ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # linux (x86‑64)
          - os: linux-intel
            runs-on: ubuntu-latest
            platform: auto
            archs: auto64
          # linux (AArch64)
          - os: linux-arm
            runs-on: ubuntu-24.04-arm
            platform: auto
            archs: auto64
          # Windows (x86‑64)
          - os: windows
            runs-on: windows-latest
            platform: auto
            archs: auto64
          # macOS Intel
          - os: macos-intel
            runs-on: macos-13          # last x86_64 runner
            platform: auto
            archs: auto64
          # macOS Apple‑silicon
          - os: macos-arm
            runs-on: macos-latest
            platform: auto
            archs: auto,universal2
          # iOS cross‑compiled wheel (cannot be executed here)
          - os: ios
            runs-on: macos-latest
            platform: ios
            archs: auto64

    steps:
      - uses: actions/checkout@v4

      - name: Build wheels
        uses: pypa/cibuildwheel@v3.0.0b1
        env:
          CIBW_PLATFORM: ${{ matrix.platform }}
          CIBW_ARCHS: ${{ matrix.archs }}
          CIBW_MANYLINUX_I686_IMAGE: manylinux2014

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  # ---------------- Build sdist ----------------
  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: dist/*.tar.gz

  # ---------------- Test distributions ----------------
  test_dists:
    name: Test distributions on ${{ matrix.os }} (Python ${{ matrix.python-version }})
    needs: [ build_wheels, build_sdist ]
    runs-on: ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.13" ]
        include:
          - os: linux-intel
            runs-on: ubuntu-latest
          - os: linux-arm
            runs-on: ubuntu-24.04-arm
          - os: windows
            runs-on: windows-latest
          - os: macos-intel
            runs-on: macos-13
          - os: macos-arm
            runs-on: macos-latest
          # iOS wheels cannot be executed in CI – skipped

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download artifacts for this OS
        uses: actions/download-artifact@v4
        with:
          pattern: "cibw-wheels-${{ matrix.os }}-*\ncibw-sdist"
          path: dist
          merge-multiple: true

      - name: Show downloaded artifacts
        shell: bash
        run: |
          echo "Artifacts on runner ${RUNNER_OS} for ${matrix.os}:"
          if [ -d dist ]; then
            find dist -maxdepth 1 -type f -print
          else
            echo "(none)"
          fi

      - name: Run unit tests
        if: hashFiles('dist/**') != ''
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          for pkg in dist/*.{whl,tar.gz}; do
            echo "=============================="
            echo "Testing $pkg"
            python -m venv .venv
            source .venv/bin/activate
            python -m pip install --upgrade pip
            python -m pip install "$pkg"
            python -m unittest discover -s ./tests -p "*.py"
            deactivate
            rm -rf .venv
          done

  # ---------------- Publish to TestPyPI ----------------
  upload_pypi:
    name: Upload to TestPyPI
    needs: [ build_wheels, build_sdist ]
    runs-on: ubuntu-latest
    environment: PyPI
    permissions:
      id-token: write
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: cibw-*
          path: dist
          merge-multiple: true
      
      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          username: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          skip-existing: true
